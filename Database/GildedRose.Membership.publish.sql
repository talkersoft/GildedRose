/*
Deployment script for GildedRose.Membership

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "GildedRose.Membership"
:setvar DefaultFilePrefix "GildedRose.Membership"
:setvar DefaultDataPath "d:\MSSQL\Data\"
:setvar DefaultLogPath "d:\MSSQL\Data\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
PRINT N'Creating [logs]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [logs];


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [logs_1D7400D7], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_logs_1D7400D7.mdf') TO FILEGROUP [logs];


GO
PRINT N'Creating [membership]...';


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILEGROUP [membership];


GO
ALTER DATABASE [$(DatabaseName)]
    ADD FILE (NAME = [membership_29E16213], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_membership_29E16213.mdf') TO FILEGROUP [membership];


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [logs]...';


GO
CREATE SCHEMA [logs]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [membership]...';


GO
CREATE SCHEMA [membership]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [dbo].[Address]...';


GO
CREATE TYPE [dbo].[Address]
    FROM NVARCHAR (100) NOT NULL;


GO
PRINT N'Creating [dbo].[AuditDate]...';


GO
CREATE TYPE [dbo].[AuditDate]
    FROM DATETIME2 (0) NOT NULL;


GO
PRINT N'Creating [dbo].[AuditUser]...';


GO
CREATE TYPE [dbo].[AuditUser]
    FROM INT NOT NULL;


GO
PRINT N'Creating [dbo].[City]...';


GO
CREATE TYPE [dbo].[City]
    FROM NVARCHAR (100) NOT NULL;


GO
PRINT N'Creating [dbo].[Email]...';


GO
CREATE TYPE [dbo].[Email]
    FROM NVARCHAR (255) NOT NULL;


GO
PRINT N'Creating [dbo].[PostalCode]...';


GO
CREATE TYPE [dbo].[PostalCode]
    FROM NVARCHAR (10) NOT NULL;


GO
PRINT N'Creating [dbo].[PWD]...';


GO
CREATE TYPE [dbo].[PWD]
    FROM NVARCHAR (255) NOT NULL;


GO
PRINT N'Creating [dbo].[State]...';


GO
CREATE TYPE [dbo].[State]
    FROM NVARCHAR (2) NOT NULL;


GO
PRINT N'Creating [logs].[ApiLog]...';


GO
CREATE TABLE [logs].[ApiLog] (
    [Id]              INT                IDENTITY (1, 1) NOT NULL,
    [Message]         NVARCHAR (MAX)     NULL,
    [MessageTemplate] NVARCHAR (MAX)     NULL,
    [Level]           NVARCHAR (128)     NULL,
    [TimeStamp]       DATETIMEOFFSET (7) NOT NULL,
    [Exception]       NVARCHAR (MAX)     NULL,
    [Properties]      XML                NULL,
    [LogEvent]        NVARCHAR (MAX)     NULL,
    CONSTRAINT [PK_ApiLog] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [logs].[SQLException]...';


GO
CREATE TABLE [logs].[SQLException] (
    [Id]            INT             IDENTITY (1, 1) NOT NULL,
    [ProcedureName] NVARCHAR (100)  NOT NULL,
    [ErrorMessage]  NVARCHAR (4000) NULL,
    [ErrorNumber]   INT             NULL,
    [ErrorLine]     INT             NULL,
    [ErrorSeverity] INT             NULL,
    [ErrorState]    INT             NULL,
    [ErrorDate]     DATETIME        NOT NULL,
    CONSTRAINT [PK_SQLException] PRIMARY KEY CLUSTERED ([Id] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [logs].[SQLException].[IX_SQLException_ErrorDate]...';


GO
CREATE NONCLUSTERED INDEX [IX_SQLException_ErrorDate]
    ON [logs].[SQLException]([ErrorDate] ASC);


GO
PRINT N'Creating [logs].[SQLException].[IX_SQLException_ProcedureName]...';


GO
CREATE NONCLUSTERED INDEX [IX_SQLException_ProcedureName]
    ON [logs].[SQLException]([ProcedureName] ASC);


GO
PRINT N'Creating [membership].[Organization]...';


GO
CREATE TABLE [membership].[Organization] (
    [Identifier] UNIQUEIDENTIFIER   NOT NULL,
    [Name]       NVARCHAR (100)     NOT NULL,
    [Address]    [dbo].[Address]    NULL,
    [Address2]   [dbo].[Address]    NULL,
    [City]       [dbo].[City]       NULL,
    [State]      [dbo].[State]      NULL,
    [PostalCode] [dbo].[PostalCode] NULL,
    [AdminEmail] [dbo].[Email]      NOT NULL,
    [Created]    [dbo].[AuditDate]  NOT NULL,
    [CreatedBy]  [dbo].[AuditUser]  NOT NULL,
    [Modified]   [dbo].[AuditDate]  NULL,
    [ModifiedBy] [dbo].[AuditUser]  NULL,
    CONSTRAINT [PK_OrganizationIdentifier] PRIMARY KEY CLUSTERED ([Identifier] ASC) ON [membership]
);


GO
PRINT N'Creating [membership].[Users]...';


GO
CREATE TABLE [membership].[Users] (
    [Id]                     INT               IDENTITY (1, 1) NOT NULL,
    [UserName]               NVARCHAR (100)    NOT NULL,
    [FirstName]              NVARCHAR (100)    NOT NULL,
    [LastName]               NVARCHAR (100)    NOT NULL,
    [Email]                  [dbo].[Email]     NOT NULL,
    [PasswordHash]           [dbo].[PWD]       NOT NULL,
    [OrganizationIdentifier] UNIQUEIDENTIFIER  NULL,
    [Created]                [dbo].[AuditDate] NOT NULL,
    [CreatedBy]              [dbo].[AuditUser] NOT NULL,
    [Modified]               [dbo].[AuditDate] NULL,
    [ModifiedBy]             [dbo].[AuditUser] NULL,
    CONSTRAINT [PK_UserIdentifier] PRIMARY KEY CLUSTERED ([Id] ASC) ON [membership]
);


GO
PRINT N'Creating [membership].[Users].[IX_Users_Email]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Users_Email]
    ON [membership].[Users]([Email] ASC);


GO
PRINT N'Creating [membership].[Users].[IX_Users_userName]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Users_userName]
    ON [membership].[Users]([UserName] ASC);


GO
PRINT N'Creating [logs].[DF_SQLException_ErrorDate]...';


GO
ALTER TABLE [logs].[SQLException]
    ADD CONSTRAINT [DF_SQLException_ErrorDate] DEFAULT (getutcdate()) FOR [ErrorDate];


GO
PRINT N'Creating unnamed constraint on [membership].[Organization]...';


GO
ALTER TABLE [membership].[Organization]
    ADD DEFAULT getutcdate() FOR [Created];


GO
PRINT N'Creating unnamed constraint on [membership].[Users]...';


GO
ALTER TABLE [membership].[Users]
    ADD DEFAULT getutcdate() FOR [Created];


GO
PRINT N'Creating [membership].[FK_User_Organization]...';


GO
ALTER TABLE [membership].[Users]
    ADD CONSTRAINT [FK_User_Organization] FOREIGN KEY ([OrganizationIdentifier]) REFERENCES [membership].[Organization] ([Identifier]);


GO
PRINT N'Creating [membership].[CreateAccount]...';


GO
CREATE PROCEDURE [membership].[CreateAccount]
	@userName nvarchar(100),
	@firstName nvarchar(100),
	@lastName nvarchar(100),
	@email nvarchar(255),
	@passwordHash nvarchar(255),
	@organization uniqueidentifier = null
AS 
SET NOCOUNT ON
BEGIN TRY
	DECLARE @Transaction VARCHAR(20);  
	SELECT @Transaction = 'CreateAccountTransaction'; 
	DECLARE @Id AS INT = 0;

	BEGIN TRANSACTION @Transaction
		INSERT INTO 
			[membership].[Users] 
				(
					UserName,
					FirstName,
					LastName,
					Email,
					PasswordHash,
					OrganizationIdentifier,
					Created,
					CreatedBy
				) VALUES 
				(
					@userName,
					@firstName,
					@lastName,
					@email,
					@passwordHash,
					@organization,
					getdate(),
					@Id
				);

	COMMIT TRANSACTION @Transaction
	SET @Transaction = NULL;

	SET @Id = SCOPE_IDENTITY();

		UPDATE 
			[membership].[Users]
		SET
			CreatedBy = Id
		WHERE
			Id = @Id;

		SELECT @Id as Id;
END TRY  
BEGIN CATCH   

IF @Transaction IS NOT NULL
BEGIN
	ROLLBACK;
END
	PRINT 'error';
		INSERT INTO [logs].[SQLException] (ProcedureName, ErrorMessage, ErrorNumber, ErrorLine, ErrorSeverity, ErrorState)
		VALUES (ERROR_PROCEDURE(), ERROR_MESSAGE(), ERROR_NUMBER(), ERROR_LINE(), ERROR_SEVERITY(), ERROR_STATE());
	THROW;
END CATCH
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
DECLARE @Organization TABLE (
	[Identifier] [uniqueidentifier] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[AdminEmail] [dbo].[Email] NOT NULL,
    [CreatedBy] [AuditUser]
);

 
INSERT INTO 
	@Organization ([Identifier], [Name], [AdminEmail], [CreatedBy]) 
VALUES
('9C1ACC19-30B6-4C4F-ABB7-161482542709', 'Truefit', 'admin@truefit.com', 1);

 
-- Merge Statement Used to ensure list of items maintained in the table variable are persisted into the database
MERGE membership.Organization AS t
USING @Organization as s
	on 	(t.[Identifier] = s.[Identifier])
WHEN NOT MATCHED BY TARGET
    THEN INSERT (Identifier, [Name], AdminEmail, CreatedBy)
        VALUES (s.Identifier, s.[Name], s.AdminEmail, s.CreatedBy)
WHEN MATCHED
    THEN UPDATE SET 
				t.[Name] = s.Name, 
				t.AdminEmail = s.AdminEmail
WHEN NOT MATCHED BY SOURCE 
    THEN DELETE;
DECLARE @Users TABLE (
	[Id] INT NOT NULL, 
    [UserName] NVARCHAR(100) NOT NULL,
    [FirstName] NVARCHAR(100) NOT NULL,
    [LastName] NVARCHAR(100) NOT NULL,
	[Email] [Email] NOT NULL,
	[PasswordHash] [PWD] NOT NULL,
	[OrganizationIdentifier] UNIQUEIDENTIFIER NULL,
    [CreatedBy] [AuditUser]
);

 
INSERT INTO 
	@Users ([Id], [UserName], [FirstName], [LastName], [Email], [PasswordHash], [OrganizationIdentifier], [CreatedBy]) 
VALUES
(1, 'talkersoft', 'Todd', 'Alker', 'talkersoft@gmail.com', 'EHP4Q+HQ4O3ZLLQObMij4+nVHcZd4B8HDz0w8CTmkB/aWFwq84EJ27NoDu7yCaAVe9ohH8MppfnvsXfuz5nQLVwUTcFC/X8LF2rjlCzW+OY=', '9C1ACC19-30B6-4C4F-ABB7-161482542709', 1),
(2, 'jgretz', 'Josh', 'Gretz', 'jgretz@truefit.io', 'EHP4Q+HQ4O3ZLLQObMij4+nVHcZd4B8HDz0w8CTmkB/aWFwq84EJ27NoDu7yCaAVe9ohH8MppfnvsXfuz5nQLVwUTcFC/X8LF2rjlCzW+OY=', '9C1ACC19-30B6-4C4F-ABB7-161482542709', 1)

 
-- Merge Statement Used to ensure list of items maintained in the table variable are persisted into the database
MERGE membership.Users AS t
USING @Users as s
	on 	(t.[Id] = s.[Id])
WHEN NOT MATCHED BY TARGET
    THEN INSERT (UserName, FirstName, LastName, Email, PasswordHash, OrganizationIdentifier, CreatedBy)
        VALUES (s.UserName, s.FirstName, s.LastName, s.Email, s.PasswordHash, s.OrganizationIdentifier, s.CreatedBy)
WHEN MATCHED
    THEN UPDATE SET 
				t.UserName = s.UserName, 
				t.FirstName = s.FirstName,
				t.LastName = s.LastName,
				t.Email = s.Email, 
				t.OrganizationIdentifier = s.OrganizationIdentifier,
				t.PasswordHash = s.PasswordHash
WHEN NOT MATCHED BY SOURCE 
    THEN DELETE;
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
